---
- name: Verify
  hosts: all
  tasks:
    - name: Populate service facts
      ansible.builtin.service_facts:

    - name: Populate activemq facts
      middleware_automation.amq.activemq_facts:
        base_url: http://localhost:8161
        auth_username: amq
        auth_password: amqbrokerpass
        validate_certs: false

    - name: Check if amq-broker service is started
      ansible.builtin.assert:
        that:
          - ansible_facts.services["amq-broker.service"]["state"] == "running"
          - ansible_facts.services["amq-broker.service"]["status"] == "enabled"

    - name: Read content of instance1 logs
      ansible.builtin.slurp:
        src: /var/log/activemq/amq-broker/artemis.log
      register: slurped_log_instance1
      delegate_to: instance1
      run_once: true

    - name: Read content of instance2 logs
      ansible.builtin.slurp:
        src: /var/log/activemq/amq-broker/artemis.log
      register: slurped_log_instance2
      delegate_to: instance2
      run_once: true

    - name: Check cluster status
      run_once: true
      block:
        - name: Check master on instance1
          ansible.builtin.assert:
            that:
              - "'live Message Broker is starting' in slurped_log_instance1.content|b64decode or 'Primary message broker is starting' in slurped_log_instance1.content|b64decode"
              - "'Server is now live' in slurped_log_instance1.content|b64decode or 'Server is now active' in slurped_log_instance1.content|b64decode"
            quiet: true
        - name: Check slave on instance2
          ansible.builtin.assert:
            that:
              - "'Backup message broker is starting' in slurped_log_instance2.content|b64decode"
              - "'waiting live to fail before it gets active' in slurped_log_instance2.content|b64decode or 'waiting for primary to fail before activating' in slurped_log_instance2.content|b64decode"
            quiet: true

    - name: Check cluster status via jolokia facts (master)
      ansible.builtin.assert:
        that:
          - ansible_facts.activemq.Active == true
          - ansible_facts.activemq.Backup == false
          - ansible_facts.activemq.Clustered == true
          - ansible_facts.activemq.SharedStore == false
          - ansible_facts.activemq.HAPolicy == "Replication Primary w/quorum voting"
      when: inventory_hostname == 'instance1'

    - name: Check cluster status via jolokia facts (backup)
      ansible.builtin.assert:
        that:
          - ansible_facts.activemq.Active == false
          - ansible_facts.activemq.Backup == true
          - ansible_facts.activemq.SharedStore == false
          - ansible_facts.activemq.HAPolicy == "Replication Backup w/quorum voting"
      when: inventory_hostname == 'instance2'
